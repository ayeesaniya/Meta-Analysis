########Differential gene expression##########

#to make sure the order of common genes matches in all files
#DGE after batch correction
f.source=factor(phenodata$Pheno_data, levels=c("CNT","SCZ"))
design_metafile <- model.matrix(~0+factor(f.source))
colnames(design_metafile)<-c("CNT","SCZ")
fit_metafile=lmFit(metabc1,design_metafile)

contrast.matrix<-makeContrasts(SCZ-CNT, levels=design_metafile)
fit2<-contrasts.fit(fit_metafile,contrast.matrix)
fit2<-eBayes(fit2)

info.tab=topTable(fit2, number=Inf,adjust.method="BH", confint=0.95)
topgenes=info.tab[info.tab[,"adj.P.Val"]<0.05,]

dev.new()
EnhancedVolcano(info.tab,
                lab = rownames(info.tab),
                x = 'logFC',
                y = 'adj.P.Val',
                ylab = "-Log10 adj.P.Value",
                pCutoff = 5e-2,
                FCcutoff = 500,
                labSize = 4,
                ylim = c(0,9),
                gridlines.major = FALSE,
                gridlines.minor = FALSE,
                title = "Volcano plot for metafile")

########unmereg metafile such that each metafile has 

#unmerging datasets
metabc1.df=as.data.frame(t(metabc1))
phenodata.df=phenodata[,c(1,3)]
metabc1.df=rownames_to_column(metabc1.df, var="GSM_id")
metabc1.df=cbind(metabc1.df,phenodata.df)
metabc1.df=metabc1.df%>%relocate(Batch)
metabc1.df=column_to_rownames(metabc1.df,var="GSM_id")

metabc1.df <- metabc1.df %>%
  rownames_to_column(var = "GSE_id")

# List of dataset names
dataset_names <- c("GSE18312", "GSE38481", "GSE38484", "GSE48072", "GSE54913", "GSE27383", "Kumarasinghe")

# Initialize an empty list to store results
DGE_results <- list()

# Loop through each dataset
for (dataset in dataset_names) {
  # Subset data
  DS <- metabc1.df %>%
    filter(Batch == dataset) %>%
    column_to_rownames(var = "GSE_id")
  
  DS <- as.data.frame(t(DS[, -1]))  # Transpose and convert to data frame
  
  PD <- phenodata %>%
    filter(Batch == dataset)
  
  f.source <- factor(PD$Pheno_data, levels = c("CNT", "SCZ"))
  
  # Check if both levels exist to prevent errors
  if (length(unique(f.source)) < 2) {
    warning(paste("Skipping dataset", dataset, "due to missing group levels"))
    next
  }
  
  design_metafile <- model.matrix(~0 + f.source)
  colnames(design_metafile) <- c("CNT", "SCZ")
  
  DS[] <- lapply(DS, function(x) as.numeric(as.character(x)))
  
  fit <- lmFit(DS, design_metafile)
  contrast.matrix <- makeContrasts(SCZ - CNT, levels = design_metafile)
  fit2 <- contrasts.fit(fit, contrast.matrix)
  fit2 <- eBayes(fit2)
  
  # Store results in the list with dataset name as key
  DGE_results[[dataset]] <- topTable(fit2, number = Inf, adjust.method = "BH", confint = 0.95)
}

# Access results
datasets <- c("GSE18312", "GSE38481", "GSE38484", "GSE48072", "GSE54913", "GSE27383", "Kumarasinghe")

# Assign each dataset from DGE_results
for (dataset in datasets) {
  new_name <- gsub("GSE", "", dataset)  # Remove "GSE" from the name
  assign(paste0("DGE", new_name), DGE_results[[dataset]])
}
